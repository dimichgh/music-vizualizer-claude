import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import * as path from 'path';
import * as fs from 'fs';
import * as isDev from 'electron-is-dev';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  const startUrl = MAIN_WINDOW_WEBPACK_ENTRY;

  mainWindow.loadURL(startUrl);

  if (isDev) {
    mainWindow.webContents.openDevTools();
  }

  mainWindow.on('closed', () => {
    mainWindow = null;
  });
};

app.on('ready', createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// File handling - Open WAV file
ipcMain.handle('open-wav-file', async () => {
  if (!mainWindow) return { canceled: true };
  
  const { canceled, filePaths } = await dialog.showOpenDialog(mainWindow, {
    properties: ['openFile'],
    filters: [{ name: 'Audio', extensions: ['wav'] }],
  });
  
  if (canceled || filePaths.length === 0) {
    return { canceled: true };
  }
  
  const filePath = filePaths[0];
  
  try {
    // Read file as buffer
    const buffer = fs.readFileSync(filePath);
    
    // Return file details
    return {
      canceled: false,
      filePath,
      fileName: path.basename(filePath),
      buffer: buffer.buffer,
    };
  } catch (error) {
    console.error('Error reading WAV file:', error);
    return { canceled: true, error: (error as Error).message };
  }
});